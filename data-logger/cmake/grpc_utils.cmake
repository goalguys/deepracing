
set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:gRPC::grpc_cpp_plugin>)
set(_GRPC_PYTHON_PLUGIN_EXECUTABLE $<TARGET_FILE:gRPC::grpc_python_plugin>)

# Generates Python sources from the .proto files
#
# grpc_generate_py (<SRCS> <DEST> <PROTOINCLUDES> <TARGETDEP> [<ARGN>...])
#
#  SRCS - variable to define with autogenerated source files
#  DEST - directory where the source files will be created
#  PROTOINCLUDES - Directories to look for protobuf files.
#  TARGETDEP - A target to attach the autogeneration to
#  ARGN - .proto files
#
function(GRPC_GENERATE_PY SRCS DEST PROTOINCLUDES TARGETDEP)
     set(${SRS} "")
	  if(NOT ARGN)
		message(SEND_ERROR "Error: GRPC_GENERATE_PY() called without any proto files")
		return()
	  endif()
    foreach(FIL ${ARGN})
		get_filename_component(ABS_FIL ${FIL} REALPATH)
		get_filename_component(FIL_WE ${ABS_FIL} NAME_WE)
		get_filename_component(FIL_DIR ${ABS_FIL} DIRECTORY)

		set(generated_proto_py_file_ "${DEST}/${FIL_WE}_pb2.py")
		set(generated_grpc_py_file_ "${DEST}/${FIL_WE}_pb2_grpc.py")
		message(STATUS "Processing python autogen for proto file ${FIL}. Generating python files: ${generated_proto_py_file_} ${generated_grpc_py_file_}" )
		add_custom_command(
		  TARGET ${TARGETDEP} PRE_BUILD
		  COMMAND Python3::Interpreter
		  ARGS -m grpc_tools.protoc -I ${PROTOINCLUDES} --python_out=${DEST} --grpc_python_out=${DEST} ${ABS_FIL}
		  DEPENDS ${ABS_FIL} Python3::Interpreter
		  COMMENT "Running Python gRPC compiler on ${ABS_FIL}"
		  VERBATIM
		)
		list(APPEND ${SRCS} ${generated_proto_py_file_}) 
		list(APPEND ${SRCS} ${generated_grpc_py_file_}) 
  endforeach()
  #execute_process("${Python3_EXECUTABLE} -m grpc_tools.protoc -I ${CMAKE_CURRENT_BINARY_DIR} --python_out=${DEST} --grpc_python_out=${DEST} ${ARGN}"
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
endfunction()

# Generates C++ sources from the .proto files
#
# grpc_generate_cpp (<SRCS> <HDRS> <DEST> [<ARGN>...])
#
#  SRCS - variable to define with autogenerated source files
#  HDRS - variable to define with autogenerated header files
#  DEST - directory where the source files will be created
#  ARGN - .proto files
#
function(GRPC_GENERATE_CPP SRCS HDRS DEST)
  if(NOT ARGN)
    message(SEND_ERROR "Error: GRPC_GENERATE_CPP() called without any proto files")
    return()
  endif()

  if(GRPC_GENERATE_CPP_APPEND_PATH)
    # Create an include path for each file specified
    foreach(FIL ${ARGN})
      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path ${ABS_PATH})
      endif()
    endforeach()
  else()
    set(_protobuf_include_path ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  if(DEFINED PROTOBUF_IMPORT_DIRS)
    foreach(DIR ${PROTOBUF_IMPORT_DIRS})
      get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path ${ABS_PATH})
      endif()
    endforeach()
  endif()

  set(${SRCS})
  set(${HDRS})
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} REALPATH)
    get_filename_component(FIL_WE ${ABS_FIL} NAME_WE)
    get_filename_component(FIL_DIR ${ABS_FIL} DIRECTORY)
	set(generated_source_ "${DEST}/${FIL_WE}.grpc.pb.cc")
	set(generated_header_ "${DEST}/${FIL_WE}.grpc.pb.h")
	message(STATUS "Processing gRPC file : ${ABS_FIL}. Generating source file: ${generated_source_} Generating header file: ${generated_header_}")
    list(APPEND ${SRCS} ${generated_source_})
    list(APPEND ${HDRS} ${generated_header_})

    add_custom_command(
      OUTPUT ${generated_source_}
             ${generated_header_}
      COMMAND protobuf::protoc
      ARGS --grpc_out ${DEST} -I ${_protobuf_include_path} --plugin=protoc-gen-grpc=${_GRPC_CPP_PLUGIN_EXECUTABLE} ${ABS_FIL}
      DEPENDS ${ABS_FIL} protobuf::protoc gRPC::grpc_cpp_plugin
      COMMENT "Running C++ gRPC compiler on ${FIL}"
      VERBATIM )
  endforeach()

  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()


# Find gRPC CPP generator
#find_program(GRPC_CPP_PLUGIN NAMES grpc_cpp_plugin)
#mark_as_advanced(GRPC_CPP_PLUGIN)
#add_executable(gRPC::grpc_cpp_plugin IMPORTED)
#set_target_properties(gRPC::grpc_cpp_plugin PROPERTIES
#    IMPORTED_LOCATION ${GRPC_CPP_PLUGIN}
#)
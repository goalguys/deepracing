file(GLOB PROTOFILES
  "*.proto"
)

PROTOBUF_GENERATE_CPP(${PROJECT_NAME}_PROTO_SRC ${PROJECT_NAME}_PROTO_HEADER  ${PROTOFILES}  )
set(ProtobufIncludePath ${CMAKE_BINARY_DIR}/proto
    CACHE INTERNAL "Path to generated protobuf files.")
protobuf_generate_python(PY_SOURCES ${PROTOFILES})
add_custom_target(GENERATE_PROTOBUF_PYTHON ALL DEPENDS ${PY_SOURCES})
set(python_proto_path_ ${CMAKE_CURRENT_BINARY_DIR}
    CACHE INTERNAL "Path to generated python files.")
message(STATUS "Generated Python: ${PY_SOURCES}")
message(STATUS "Generated sources: ${${PROJECT_NAME}_PROTO_SRC}")
message(STATUS "Generated header: ${${PROJECT_NAME}_PROTO_HEADER}")
message(STATUS "Including protobuf library headers: ${Protobuf_INCLUDE_DIR}")
message(STATUS "Including autogenerated protobuf paths: ${ProtobufIncludePath}")
message(STATUS "Linking against protobuf libraries: ${Protobuf_LIBRARIES}")
set(PROTO_LIBS "protobuf::libprotobuf")

add_library(${PROJECT_NAME}_proto ${${PROJECT_NAME}_PROTO_SRC})# ${GRPC_SRCS})
target_include_directories(${PROJECT_NAME}_proto
  PUBLIC
  $<BUILD_INTERFACE:${ProtobufIncludePath}>
  $<INSTALL_INTERFACE:include> 
)
target_link_libraries(${PROJECT_NAME}_proto PUBLIC ${PROTO_LIBS})
if(WIN32 AND BUILD_SHARED_LIBS)
  target_compile_definitions(${PROJECT_NAME}_proto INTERFACE PROTOBUF_USE_DLLS=1 LIBPROTOBUF_EXPORT=1)
  #target_compile_definitions(${PROJECT_NAME}_proto INTERFACE )
endif()
set(install_targets
#libraries
${PROJECT_NAME}_proto 
)
install(TARGETS ${install_targets}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)
install(FILES ${PY_SOURCES} DESTINATION lib/python)
install(FILES ${PROTOFILES} DESTINATION share/${PROJECT_NAME}/proto)
install(FILES ${${PROJECT_NAME}_PROTO_HEADER} DESTINATION include/${PROJECT_NAME}/proto)
unset(install_targets)



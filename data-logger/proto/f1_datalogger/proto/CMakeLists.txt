file(GLOB PROTOFILES
  "*.proto"
)
# protobuf_generate(OUT_VAR ${PROJECT_NAME}_PROTO_SRC ${PROJECT_NAME}_PROTO_HEADER EXPORT_MACRO F1_DATALOGGER_PROTO_DLL_MACRO LANGUAGE cpp ${PROTOFILES}  )

if(BUILD_SHARED_LIBS AND WIN32)
  protobuf_generate(OUT_VAR ${PROJECT_NAME}_PROTO_CPP_SOURCES EXPORT_MACRO F1_DATALOGGER_PROTO_DLL_MACRO LANGUAGE cpp PROTOS ${PROTOFILES}  )
else()
  protobuf_generate(OUT_VAR ${PROJECT_NAME}_PROTO_CPP_SOURCES LANGUAGE cpp PROTOS ${PROTOFILES}  )
endif()

set(ProtobufIncludePath ${CMAKE_BINARY_DIR}/proto
    CACHE INTERNAL "Path to generated protobuf files.")
protobuf_generate(LANGUAGE python OUT_VAR ${PROJECT_NAME}_PY_SOURCES PROTOS ${PROTOFILES} )
add_custom_target(GENERATE_PROTOBUF_PYTHON ALL DEPENDS ${${PROJECT_NAME}_PY_SOURCES})
set(python_proto_path_ ${CMAKE_CURRENT_BINARY_DIR}
    CACHE INTERNAL "Path to generated python files.")
message(STATUS "Generated Python: ${PY_SOURCES}")
message(STATUS "Generated sources: ${${PROJECT_NAME}_PROTO_SRC}")
message(STATUS "Generated header: ${${PROJECT_NAME}_PROTO_HEADER}")
message(STATUS "Including protobuf library headers: ${Protobuf_INCLUDE_DIR}")
message(STATUS "Including autogenerated protobuf paths: ${ProtobufIncludePath}")
message(STATUS "Linking against protobuf libraries: ${Protobuf_LIBRARIES}")
set(PROTO_LIBS "protobuf::libprotobuf")

add_library(${PROJECT_NAME}_proto ${${PROJECT_NAME}_PROTO_CPP_SOURCES})
target_include_directories(${PROJECT_NAME}_proto
  PUBLIC
  $<BUILD_INTERFACE:${ProtobufIncludePath}>
  $<INSTALL_INTERFACE:include> 
)
target_link_libraries(${PROJECT_NAME}_proto PUBLIC ${PROTO_LIBS})
if(BUILD_SHARED_LIBS)
  if(MSVC)
    target_compile_definitions(${PROJECT_NAME}_proto PRIVATE "F1_DATALOGGER_PROTO_DLL_MACRO=__declspec(dllexport)")
  elseif(CYGWIN)
    target_compile_definitions(${PROJECT_NAME}_proto PRIVATE "F1_DATALOGGER_PROTO_DLL_MACRO=__attribute__((dllexport))")
  else()
    target_compile_definitions(${PROJECT_NAME}_proto PRIVATE "F1_DATALOGGER_PROTO_DLL_MACRO=__attribute__((visibility(\"default\")))")
  endif()
endif()
set(install_targets
#libraries
${PROJECT_NAME}_proto 
)
install(TARGETS ${install_targets}
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)
install(FILES ${PROTOFILES} DESTINATION share/${PROJECT_NAME}/proto)


# if(ament_cmake_FOUND)
if(WIN32)
  install(FILES ${${PROJECT_NAME}_PY_SOURCES} DESTINATION lib/site-packages)
else()
  find_package(Python3 REQUIRED COMPONENTS Interpreter)
  install(FILES ${${PROJECT_NAME}_PY_SOURCES} DESTINATION lib/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages)
endif()
# else()
#   install(FILES ${${PROJECT_NAME}_PY_SOURCES} DESTINATION lib/python)
# endif()

set(pb_headers ${${PROJECT_NAME}_PROTO_CPP_SOURCES})
list(FILTER pb_headers INCLUDE REGEX "[.]*.pb.h")
list(TRANSFORM pb_headers REPLACE "//" "/")
message(STATUS "Installing protobuf headers: ${pb_headers}")
install(FILES ${pb_headers} DESTINATION include/${PROJECT_NAME}/proto)
unset(install_targets)



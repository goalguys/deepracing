include(FindProtobuf)
find_package(Protobuf REQUIRED)
find_package(gRPC CONFIG REQUIRED)
find_package (Python3 REQUIRED COMPONENTS Interpreter)
set(c-ares_DIR $ENV{c-ares_DIR})
include(${CMAKE_SOURCE_DIR}/cmake/grpc_utils.cmake)
set(GRPC_PROTOFILES
  "DeepF1_RPC.proto"
)
file(GLOB PROTOFILES
  "*.proto"
)
protobuf_generate_cpp(${PROJECT_NAME}_PROTO_SRC ${PROJECT_NAME}_PROTO_HEADER 
${PROTOFILES}
)

grpc_generate_cpp(GRPC_SRCS GRPC_HDRS ${CMAKE_CURRENT_BINARY_DIR} ${GRPC_PROTOFILES})
message(STATUS "Generating rpc files: ${GRPC_HDRS} ${GRPC_SRCS}")

set(ProtobufIncludePath ${CMAKE_BINARY_DIR}/proto
    CACHE INTERNAL "Path to generated protobuf files.")
protobuf_generate_python(PY_SOURCES ${PROTOFILES})
add_custom_target(GENERATE_PROTOBUF_PYTHON ALL DEPENDS ${PY_SOURCES})
set(python_proto_path_ ${CMAKE_CURRENT_BINARY_DIR}
    CACHE INTERNAL "Path to generated python files.")
message(STATUS "Generated Python: ${PY_SOURCES}")
message(STATUS "Generated sources: ${${PROJECT_NAME}_PROTO_SRC}")
message(STATUS "Generated header: ${${PROJECT_NAME}_PROTO_HEADER}")
message(STATUS "Including protobuf library headers: ${Protobuf_INCLUDE_DIR}")
message(STATUS "Including autogenerated protobuf paths: ${ProtobufIncludePath}")
message(STATUS "Linking against protobuf libraries: ${Protobuf_LIBRARIES}")
add_library(${PROJECT_NAME}_proto ${${PROJECT_NAME}_PROTO_SRC} ${GRPC_SRCS})
if(MSVC AND BUILD_SHARED_LIBS)
    set_target_properties(
            ${PROJECT_NAME}_proto
            PROPERTIES
            COMPILE_DEFINITIONS PROTOBUF_USE_DLLS=1)
endif()
target_include_directories(${PROJECT_NAME}_proto PRIVATE ${ProtobufIncludePath} ${Protobuf_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries(${PROJECT_NAME}_proto ${Protobuf_LIBRARIES} gRPC::grpc++ gRPC::grpc gRPC::gpr gRPC::grpc++_unsecure gRPC::grpc++_reflection)
grpc_generate_py(GRPC_PY_SRCS ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_NAME}_proto ${GRPC_PROTOFILES})
message(STATUS "Generated python gRPC files: ${GRPC_PY_SRCS}")




set(install_targets
#libraries
${PROJECT_NAME}_proto 
)
install(TARGETS ${install_targets}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)
install(FILES ${PY_SOURCES} DESTINATION lib/python)
install(FILES ${GRPC_PY_SRCS} DESTINATION lib/python)
install(FILES ${PROTOFILES} DESTINATION share/${PROJECT_NAME}/proto)
install(FILES ${${PROJECT_NAME}_PROTO_HEADER} DESTINATION include/${PROJECT_NAME}/proto)
unset(install_targets)


